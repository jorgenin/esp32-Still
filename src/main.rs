use anyhow::Result;
use log::info;
use core::str;
use embedded_svc::{http::Method, io::Write};
use esp_idf_svc::{
    eventloop::EspSystemEventLoop,
    hal::{
        i2c::{I2cConfig, I2cDriver},
        io::EspIOError,
        prelude::*, temp_sensor::{TempSensorConfig, TempSensorDriver},
    },
    http::server::{Configuration, EspHttpServer},
    
};



use shtcx::{self, shtc3, PowerMode};
use std::{
    sync::{Arc, Mutex},
    thread::sleep,
    time::Duration,
};




use wifi::wifi;

#[toml_cfg::toml_config]
pub struct Config {
    #[default("")]
    wifi_ssid: &'static str,
    #[default("")]
    wifi_psk: &'static str,
}

fn main() -> Result<()> {
    esp_idf_svc::sys::link_patches();
    esp_idf_svc::log::EspLogger::initialize_default();
    info!("Starting...");
    info!("{}", CONFIG.wifi_ssid);
    info!("{}", CONFIG.wifi_psk);
    let peripherals = Peripherals::take().unwrap();
    let sysloop = EspSystemEventLoop::take()?;
    
    let free_memory = unsafe { esp_idf_sys::esp_get_minimum_free_heap_size() } / 1024;
    info!("Free memory: {}KB",free_memory);
    // The constant `CONFIG` is auto-generated by `toml_config`.
    let app_config = CONFIG;

    // Connect to the Wi-Fi network
    let _wifi = wifi(
        app_config.wifi_ssid,
        app_config.wifi_psk,
        peripherals.modem,
        sysloop,
    )?;

    let temp_sensor = peripherals.temp_sensor;
    let config = TempSensorConfig::new();
    let mut temp_sensor_driver = TempSensorDriver::new(&config, temp_sensor).unwrap();

    let _ = temp_sensor_driver.enable();
    
    



    // Set the HTTP server
    let mut server = EspHttpServer::new(&Configuration::default())?;
    // http://<sta ip>/ handler
    server.fn_handler(
        "/",
        Method::Get,
        |request| -> core::result::Result<(), EspIOError> {
            let html = index_html();
            let mut response = request.into_ok_response()?;
            response.write_all(html.as_bytes())?;
            Ok(())
        },
    )?;

    // http://<sta ip>/temperature handler
    let temp_driver_arc = Arc::new(Mutex::new(temp_sensor_driver));
    let temp_driver_arc_clone = temp_driver_arc.clone();
    server.fn_handler(
        "/temperature",
        Method::Get,
        move |request| -> core::result::Result<(), EspIOError> {
            let mut temp_driver = temp_driver_arc.lock().unwrap();
            let temp_val = temp_driver.get_celsius().unwrap();
            let html = temperature(temp_val);
            let mut response = request.into_ok_response()?;
            response.write_all(html.as_bytes())?;
            Ok(())
        },
    )?;

    println!("Server awaiting connection");

    // Prevent program from exiting
    loop {
        let mut temp_driver = temp_driver_arc_clone.lock().unwrap();

        info!("Chip temperature: {:.2}°C", temp_driver.get_celsius().unwrap());
        sleep(Duration::from_millis(1000));
    }
}

fn templated(content: impl AsRef<str>) -> String {
    format!(
        r#"
<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>esp-rs web server</title>
    </head>
    <body>
        {}
    </body>
</html>
"#,
        content.as_ref()
    )
}

fn index_html() -> String {
    templated("Hello from ESP32-C3!")
}

fn temperature(val: f32) -> String {
    templated(format!("Chip temperature: {:.2}°C", val))
}